import 'dart:io';
import 'package:earned_it/config/design.dart';
import 'package:earned_it/models/wish/wish_model.dart';
import 'package:earned_it/view_models/home_provider.dart';
import 'package:earned_it/view_models/user_provider.dart';
import 'package:earned_it/view_models/wish/wish_provider.dart';
import 'package:earned_it/views/loading_overlay_view.dart';
import 'package:earned_it/views/wish/wish_view.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_slidable/flutter_slidable.dart';
import 'package:go_router/go_router.dart';
import 'package:intl/intl.dart';

final wishAllViewLoadingProvider = StateProvider<bool>((ref) => true);

// 1. ConsumerWidget -> ConsumerStatefulWidgetÏúºÎ°ú Î≥ÄÍ≤Ω
class WishAllView extends ConsumerStatefulWidget {
  const WishAllView({super.key});

  @override
  ConsumerState<WishAllView> createState() => _WishAllViewState();
}

class _WishAllViewState extends ConsumerState<WishAllView> {
  // 2. initState Ï∂îÍ∞Ä: ÏúÑÏ†ØÏù¥ Ï≤òÏùå ÏÉùÏÑ±Îê† Îïå Ìïú Î≤àÎßå Ïã§Ìñâ
  @override
  void initState() {
    super.initState();
    // üëá 2. initStateÏóêÏÑú Î°úÎî© ÏÉÅÌÉúÎ•º Ï†úÏñ¥ÌïòÎèÑÎ°ù ÏàòÏ†ï
    WidgetsBinding.instance.addPostFrameCallback((_) async {
      // Î°úÎî© ÏãúÏûë
      ref.read(wishAllViewLoadingProvider.notifier).state = true;
      try {
        // Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        await ref.read(userProvider.notifier).loadAllWish();
      } finally {
        // ÏÑ±Í≥µ/Ïã§Ìå® Ïó¨Î∂ÄÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ Î°úÎî© Ìï¥Ï†ú
        if (mounted) {
          ref.read(wishAllViewLoadingProvider.notifier).state = false;
        }
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    final userState = ref.watch(userProvider);
    // starÍ∞Ä ÏïÑÎãå ÏïÑÏù¥ÌÖúÎì§Îßå ÌïÑÌÑ∞ÎßÅÌïòÏó¨ 'Ï†ÑÏ≤¥' Î¶¨Ïä§Ìä∏Î°ú ÏÇ¨Ïö©
    final allWishes = userState.totalWishes;
    final isLoading = ref.watch(wishAllViewLoadingProvider); // Î°úÎî© ÏÉÅÌÉú Í∞êÏãú

    return Stack(
      children: [
        Scaffold(
          appBar: AppBar(
            scrolledUnderElevation: 0,
            title: const Text(
              'Ï†ÑÏ≤¥ ÏúÑÏãúÎ¶¨Ïä§Ìä∏',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            centerTitle: false,
          ),
          body:
              allWishes.isEmpty
                  ? const Center(
                    child: Text(
                      'ÏúÑÏãúÎ¶¨Ïä§Ìä∏Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§.',
                      style: TextStyle(fontSize: 16, color: Colors.grey),
                    ),
                  )
                  : ListView.builder(
                    itemCount: allWishes.length,
                    itemBuilder: (context, index) {
                      final item = allWishes[index];
                      // 3. Ïû¨ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÏïÑÏù¥ÌÖú ÏúÑÏ†Ø Ìò∏Ï∂ú
                      return AllWishlistItem(
                        key: ValueKey(item.wishId), // Í∞Å ÏïÑÏù¥ÌÖúÏóê Í≥†Ïú† Key Î∂ÄÏó¨
                        item: item,
                        itemIndex: index, // 'Ï†ÑÏ≤¥' Î¶¨Ïä§Ìä∏Ïù¥ÎØÄÎ°ú isStarÎäî false
                      );
                    },
                  ),
        ),
        if (isLoading) overlayView(),
      ],
    );
  }
}

class AllWishlistItem extends ConsumerWidget {
  final WishModel item;
  final int itemIndex;

  const AllWishlistItem({
    super.key,
    required this.item,
    required this.itemIndex,
  });

  // ÏßÑÌñâÎ•†Ïóê Îî∞Îùº ÏÉâÏÉÅÏùÑ Î∞òÌôòÌïòÎäî Ìï®Ïàò
  Color _getProgressColor(double progress) {
    if (progress >= 1.0) return Colors.green; // 100% Îã¨ÏÑ± Ïãú
    if (progress >= 0.8) return Colors.purple;
    if (progress >= 0.5) return Colors.blue;
    if (progress >= 0.3) return Colors.orange;
    return Colors.red;
  }

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final currencyFormat = NumberFormat.decimalPattern('ko_KR');

    return Card(
      color:
          Theme.of(context).brightness == Brightness.dark
              ? Colors.transparent
              : Colors.white,
      margin: EdgeInsets.symmetric(vertical: context.height(0.005)),
      elevation: 0,
      child: ClipRRect(
        child: Slidable(
          key: ValueKey(item.wishId),
          startActionPane: ActionPane(
            motion: const StretchMotion(),
            extentRatio: 0.5,
            children: <Widget>[
              SlidableAction(
                onPressed: (context) {},
                backgroundColor: Colors.lightBlue,
                foregroundColor: Colors.white,
                icon: Icons.check,
                label: 'Íµ¨Îß§',
              ),
              SlidableAction(
                onPressed: (context) {},
                backgroundColor: Colors.orangeAccent,
                foregroundColor: Colors.white,
                icon: Icons.star,
                label: "Star",
              ),
            ],
          ),
          endActionPane: ActionPane(
            motion: const StretchMotion(),
            extentRatio: 0.5,
            children: <Widget>[
              SlidableAction(
                onPressed: (context) => context.push('/editWish', extra: item),
                backgroundColor: Colors.grey.shade600,
                foregroundColor: Colors.white,
                icon: Icons.edit,
                label: 'ÏàòÏ†ï',
              ),
              SlidableAction(
                onPressed: (context) {
                  showDialog(
                    context: context,
                    builder:
                        (ctx) => AlertDialog(
                          title: const Text('ÏÇ≠Ï†ú ÌôïÏù∏'),
                          content: Text("'${item.name}' Ìï≠Î™©ÏùÑ Ï†ïÎßêÎ°ú ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?"),
                          actions: [
                            TextButton(
                              child: const Text('Ï∑®ÏÜå'),
                              onPressed: () => Navigator.of(ctx).pop(),
                            ),
                            TextButton(
                              child: const Text(
                                'ÏÇ≠Ï†ú',
                                style: TextStyle(color: Colors.red),
                              ),
                              onPressed: () {
                                ref
                                    .read(wishViewModelProvider.notifier)
                                    .deleteWishItem(context, item.wishId);
                                Navigator.of(ctx).pop();
                              },
                            ),
                          ],
                        ),
                  );
                },
                backgroundColor: const Color(0xFFFE4A49),
                foregroundColor: Colors.white,
                icon: Icons.delete,
                label: 'ÏÇ≠Ï†ú',
              ),
            ],
          ),
          child: InkWell(
            onTap: () {
              /* ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄ Ïù¥Îèô Îì± */
            },
            child: Container(
              padding: EdgeInsets.symmetric(horizontal: context.middlePadding),
              constraints: BoxConstraints(minHeight: context.height(0.1)),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: <Widget>[
                  SizedBox(
                    width: context.height(0.08),
                    height: context.height(0.08),
                    child: Container(
                      decoration: BoxDecoration(
                        borderRadius: BorderRadius.circular(8.0),
                        border: Border.all(width: 1, color: Colors.grey),
                      ),
                      child: ClipRRect(
                        borderRadius: BorderRadius.circular(8.0),
                        child: Image.network(
                          item.itemImage,
                          fit: BoxFit.cover,
                          errorBuilder: (context, error, stackTrace) {
                            return Container(
                              color: Colors.grey.shade200,
                              child: const Icon(
                                Icons.image_not_supported_outlined,
                                color: Colors.grey,
                              ),
                            );
                          },
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          item.vendor,
                          style: TextStyle(
                            fontWeight: FontWeight.bold,
                            fontSize: context.width(0.04),
                          ),
                          maxLines: 2,
                          overflow: TextOverflow.ellipsis,
                        ),
                        const SizedBox(height: 4),
                        Text(
                          item.name,
                          style: TextStyle(
                            color:
                                Theme.of(context).brightness == Brightness.dark
                                    ? const Color.fromARGB(255, 180, 180, 180)
                                    : const Color.fromARGB(255, 108, 108, 108),
                            fontSize: context.width(0.038),
                          ),
                        ),
                        Text(
                          '${currencyFormat.format(item.price)}Ïõê',
                          style: TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: context.width(0.038),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
    );
  }
}
